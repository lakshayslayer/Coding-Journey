For example, following are steps for generating the 3-bit Gray code list from the list of 2-bit
Gray code list. L1 = {00, 01, 11, 10} (List of 2-bit Gray Codes) L2 = {10, 11, 01, 00} (Reverse
of L1) Prefix all entries of L1 with ‘0’, L1 becomes {000, 001, 011, 010} Prefix all entries of L2
with ‘1’, L2 becomes {110, 111, 101, 100} Concatenate L1 and L2, we get {000, 001, 011, 010,
110, 111, 101, 100} To generate n-bit Gray codes, we start from list of 1 bit Gray codes. The
list of 1 bit Gray code is {0, 1}. We repeat above steps to generate 2 bit Gray codes from 1 bit
Gray codes, then 3-bit Gray codes from 2-bit Gray codes till the number of bits becomes equal to n.



#include <bits/stdc++.h>
#define pb push_back
using namespace std;

void GreyCode(int n){
	if(n<=0) return;

	vector<string> vs;
	vs.pb("0");
	vs.pb("1");

	int i,j;
	for(i=2; i<(1<<n); i=i<<1){

		for(j=i-1; j>=0; j--)
			vs.pb(vs[j]);
		
		for(j=0; j<i; j++)
			vs[j]="0"+vs[j];

		for(j=i; j<2*i; j++)
			vs[j]="1"+vs[j];
		
	}

	for(i=0; i<vs.size(); i++)
		cout<<vs[i]<<endl;

}

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
   
	int n ;cin>>n;
	GreyCode(n);
	return 0;
}
