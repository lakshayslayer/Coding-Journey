#include <bits/stdc++.h>
using namespace std;
 

int lcs(string s,string r,int n,int m,vector<vector<int>>& dp){
    if(n==0 || m==0){
        return 0;
    }
    if(s[n-1]==r[m-1])
        return dp[n][m]=1+lcs(s,r,n-1,m-1,dp);
    if(dp[n][m]!=-1){
        return dp[n][m];
    }
    else
        return dp[n][m]= max(lcs(s,r,n-1,m,dp),lcs(s,r,n,m-1,dp));
}

int LCS(string s,string r,int n,int m){

    int DP[n+1][m+1];

    for(int i=0;i<=n;i++){
        for(int j=0;j<=m;j++){
            if(i==0 || j==0)
                DP[i][j]=0;
            else if(s[i-1]==r[j-1])
                DP[i][j]=1+DP[i-1][j-1];
            else
                DP[i][j]=max(DP[i-1][j],DP[i][j-1]);
        }
    }
    return DP[n][m];
}
int main(){
    string s1,s2;
    cin>>s1>>s2;
    int n=s1.length();
    int m=s2.length();

    vector<vector<int> > dp(n+1,vector<int>(m+1,-1));
    cout<<lcs(s1,s2,n,m,dp)<<endl;
    cout<<LCS(s1,s2,n,m)<<endl;
    return 0;

}
